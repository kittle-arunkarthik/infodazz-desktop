name: üèóÔ∏è Build and Release Infodazz Face & School (from infodazz_school/arun-dev)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-build]
  push:
    tags:
      - "school-v*"
      - "face-v*"

jobs:
  # =========================================================
  # üè´ BUILD & RELEASE - SCHOOL
  # =========================================================
  build-school:
    if: startsWith(github.ref, 'refs/tags/school-v')
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      # 1Ô∏è‚É£ Checkout SOURCE CODE (from RVK repo, branch arun-dev-2)
      - name: üì¶ Checkout School Source Code
        uses: actions/checkout@v4
        with:
          repository: kittle-arunkarthik/infodazz_school
          ref: arun-dev
          token: ${{ secrets.SOURCE_REPO_TOKEN }}
          fetch-depth: 0

      # 2Ô∏è‚É£ Setup Node.js
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: "electron/package-lock.json"

      # 3Ô∏è‚É£ Install Electron dependencies
      - name: ‚ö° Install Electron dependencies
        run: |
          cd electron
          npm ci

      # 4Ô∏è‚É£ Build React apps (SCHOOL + FACE)
      - name: üß± Build React apps (SCHOOL + FACE)
        shell: bash
        run: |
          echo "üì¶ Building SCHOOL and FACE React apps on $RUNNER_OS"

          # === SCHOOL BUILD ===
          cd SCHOOL/client

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "ü™ü Installing Bun on Windows..."
            powershell -Command "irm bun.sh/install.ps1 | iex"

            # ‚úÖ Explicitly configure Bun path
            export BUN_INSTALL="$USERPROFILE\\.bun"
            export PATH="$BUN_INSTALL\\bin:$PATH"

            echo "‚úÖ Bun installed at $BUN_INSTALL"
            ls "$BUN_INSTALL\\bin"
          else
            echo "üêß Installing Bun on Linux/macOS..."
            curl -fsSL https://bun.sh/install | bash
            export BUN_INSTALL="$HOME/.bun"
            export PATH="$BUN_INSTALL/bin:$PATH"
          fi

          echo "‚öôÔ∏è Installing dependencies & building SCHOOL..."
          "$BUN_INSTALL/bin/bun" install --no-save
          "$BUN_INSTALL/bin/bun" run build

          # === FACE BUILD ===
          cd ../../FACE/client
          echo "‚öôÔ∏è Installing dependencies & building FACE..."
          npm ci || npm install
          npm run build

          # Back to electron folder
          cd ../../electron

      # 5Ô∏è‚É£ Build and Publish Infodazz SCHOOL app
      - name: üè´ Build Infodazz School
        run: |
          echo "üöÄ Building Infodazz School for ${{ matrix.os }}"
          cd electron
          npx electron-builder --config electron-builder-school.yml --publish always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          EP_DRAFT: false
          EP_PRE_RELEASE: false
          DEBUG: electron-builder

      # 6Ô∏è‚É£ Upload combined build artifacts (for inspection/debugging)
      - name: üì§ Upload School Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Infodazz-School-${{ matrix.os }}-${{ github.ref_name }}
          path: electron/release/school/

  # =========================================================
  # üß† BUILD & RELEASE - FACE
  # =========================================================

  build-face:
    if: contains(github.ref, 'refs/tags/face-v')
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      # 1Ô∏è‚É£ Checkout SOURCE CODE (from RVK repo, branch arun-dev-2)
      - name: üì¶ Checkout School Source Code
        uses: actions/checkout@v4
        with:
          repository: kittle-arunkarthik/infodazz_school
          ref: arun-dev
          token: ${{ secrets.SOURCE_REPO_TOKEN }}
          fetch-depth: 0

      # 2Ô∏è‚É£ Setup Node.js
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: "electron/package-lock.json"

      # 3Ô∏è‚É£ Install Electron dependencies
      - name: ‚ö° Install Electron dependencies
        run: |
          cd electron
          npm ci

      # 4Ô∏è‚É£ Build React apps (SCHOOL + FACE)
      - name: üß± Build FACE React App
        shell: bash
        run: |
          echo "üì¶ Building SCHOOL and FACE React apps on $RUNNER_OS"

          # === SCHOOL BUILD ===
          cd SCHOOL/client

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "ü™ü Installing Bun on Windows..."
            powershell -Command "irm bun.sh/install.ps1 | iex"

            # ‚úÖ Explicitly configure Bun path
            export BUN_INSTALL="$USERPROFILE\\.bun"
            export PATH="$BUN_INSTALL\\bin:$PATH"

            echo "‚úÖ Bun installed at $BUN_INSTALL"
            ls "$BUN_INSTALL\\bin"
          else
            echo "üêß Installing Bun on Linux/macOS..."
            curl -fsSL https://bun.sh/install | bash
            export BUN_INSTALL="$HOME/.bun"
            export PATH="$BUN_INSTALL/bin:$PATH"
          fi

          echo "‚öôÔ∏è Installing dependencies & building SCHOOL..."
          "$BUN_INSTALL/bin/bun" install --no-save
          "$BUN_INSTALL/bin/bun" run build

          # === FACE BUILD ===
          cd ../../FACE/client
          echo "‚öôÔ∏è Installing dependencies & building FACE..."
          npm ci || npm install
          npm run build

          # Back to electron folder
          cd ../../electron

      # 6Ô∏è‚É£ Build and Publish Infodazz FACE app
      - name: üß† Build Infodazz Face
        run: |
          echo "üöÄ Building Infodazz Face for ${{ matrix.os }}"
          cd electron
          npx electron-builder --config electron-builder-face.yml --publish always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          EP_DRAFT: false
          EP_PRE_RELEASE: false
          DEBUG: electron-builder

      # 7Ô∏è‚É£ Upload combined build artifacts (for inspection/debugging)
      - name: üì§ Upload Face Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Infodazz-Face-${{ matrix.os }}-${{ github.ref_name }}
          path: electron/release/face/
